#!/usr/bin/env python
# coding: utf-8

# ## Text Files in Python
# 
# We have 88 Roger Ebert reviews to open and read, which you can see in the Jupyter Notebook dashboard below in the ebert_reviews folder.
# 
# We'll need to loop to iterate through all of the files in this folder to open and read each, then extract the bits of text that we need as separate pieces of data:
# 
# - the first line, which is the movie title (to merge to the master dataset with)
# - the second line, which is the review URL (not necessary for the word cloud but nice to have)
# - everything from the third line onwards, which is the review text
# 
# The Jupyter Notebook below contains template code that:
# 
# - Creates an empty list, df_list, to which dictionaries will be appended. This list of dictionaries will eventually be converted to a pandas DataFrame (this is the most efficient way of building a DataFrame row by row).
# - Loops through each movie's Roger Ebert review text file in the ebert_reviews folder.
# - Opens each text file using a path generated by glob and passes it into a file handle called file.
# - Creates a DataFrame called df by converting df_list using the pd.DataFrame constructor.
# 
# The task is to extract the movie title, Roger Ebert review URL, and the review in each text file and append each trio as a dictionary to df_list.
# 
# The file methods required for this task are:
# 
# - readline()
# - read()

# In[1]:


# Import the libraries
import glob
import pandas as pd


# In[2]:


# List of dictionaries to build file by file and later convert to a DataFrame
df_list = []
for ebert_review in glob.glob('ebert_reviews/*.txt'):
    with open(ebert_review, encoding='utf-8') as file:
        title = file.readline()[:-1]
        review_url = file.readline()[:-1]
        review_text = file.read()

        # Append to list of dictionaries
        df_list.append({'title': title,
                        'review_url': review_url,
                        'review_text': review_text})
df = pd.DataFrame(df_list, columns = ['title', 'review_url', 'review_text'])


# In[3]:


# Review new dataset
df


# ## Solution Test
# Run the cell below the see if your solution is correct. If an `AssertionError` is thrown, your solution is incorrect. If no error is thrown, your solution is correct.

# In[4]:


df_solution = pd.read_pickle('df_solution.pkl')
df.sort_values('title', inplace = True)
df.reset_index(inplace = True, drop = True)
df_solution.sort_values('title', inplace = True)
df_solution.reset_index(inplace = True, drop = True)
pd.testing.assert_frame_equal(df, df_solution)


# In[ ]:




